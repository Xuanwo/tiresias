package main

import (
	"fmt"
	"log"
	"os"
	"sort"
	"time"

	"gopkg.in/urfave/cli.v1"

	"github.com/Xuanwo/tiresias/config"
	"github.com/Xuanwo/tiresias/constants"
	"github.com/Xuanwo/tiresias/hosts"
	"github.com/Xuanwo/tiresias/ssh"
	"github.com/Xuanwo/tiresias/utils"
)

func main() {
	app := cli.NewApp()
	app.Name = constants.Name
	app.Usage = constants.Usage
	app.Version = constants.Version

	// Setup flags.
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "config, c",
			Usage: "Load configuration from `FILE`",
		},
	}

	sort.Sort(cli.FlagsByName(app.Flags))

	app.Action = func(c *cli.Context) error {
		conf, _ := config.New()
		err := conf.LoadFromFilePath(c.String("config"))
		if err != nil {
			return err
		}

		// Open ssh config for updating.
		sf, err := os.OpenFile(conf.SSHConfig, os.O_RDWR|os.O_CREATE, 0600)
		if err != nil {
			log.Fatal(err)
		}
		defer sf.Close()
		// Seek to the start point of last update.
		cur, err := utils.Seek(sf)
		if err != nil {
			log.Fatal(err)
		}
		err = sf.Truncate(cur)
		if err != nil {
			log.Fatal(err)
		}
		_, err = sf.WriteString(fmt.Sprintf("%sGenerated by %s at %s%s\n",
			constants.CommentPrefix, constants.Name, time.Now(), constants.CommentSuffix))
		if err != nil {
			log.Fatal(err)
		}

		// Open hosts for updating
		hf, err := os.OpenFile(conf.Hosts, os.O_RDWR|os.O_CREATE, 0600)
		if err != nil {
			log.Fatal(err)
		}
		defer hf.Close()
		// Seek to the start point of last update.
		cur, err = utils.Seek(hf)
		if err != nil {
			log.Fatal(err)
		}
		err = hf.Truncate(cur)
		if err != nil {
			log.Fatal(err)
		}
		_, err = hf.WriteString(fmt.Sprintf("%sGenerated by %s at %s%s\n",
			constants.CommentPrefix, constants.Name, time.Now(), constants.CommentSuffix))
		if err != nil {
			log.Fatal(err)
		}

		for _, v := range conf.Servers {
			err = ssh.Generate(sf, v)
			if err != nil {
				log.Fatal(err)
			}

			err = hosts.Generate(hf, v)
			if err != nil {
				log.Fatal(err)
			}
		}

		return nil
	}

	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
