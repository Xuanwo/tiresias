package hosts

import (
	"fmt"
	"html/template"
	"log"
	"os"
	"time"

	"github.com/Xuanwo/tiresias/constants"
	"github.com/Xuanwo/tiresias/model"
	"github.com/Xuanwo/tiresias/utils"
)

const hostTemplate = `{{ .Address }} {{ .Name }}
`

// Hosts is used to update Hosts.
type Hosts struct {
	Path string `yaml:"path"`

	tmpl *template.Template
	fd   *os.File
}

// Init will initiate Hosts.
func (h *Hosts) Init() (err error) {
	// Init template.
	h.tmpl, err = template.New("hosts").Parse(hostTemplate)
	if err != nil {
		return
	}

	// Init hosts file.
	h.fd, err = os.OpenFile(h.Path, os.O_RDWR|os.O_CREATE, 0600)
	if err != nil {
		log.Fatal(err)
	}

	// Seek to the start point of last update.
	cur, err := utils.Seek(h.fd)
	if err != nil {
		log.Fatal(err)
	}
	err = h.fd.Truncate(cur)
	if err != nil {
		log.Fatal(err)
	}
	_, err = h.fd.WriteString(fmt.Sprintf("%sGenerated by %s at %s%s\n",
		constants.CommentPrefix, constants.Name, time.Now(), constants.CommentSuffix))
	if err != nil {
		log.Fatal(err)
	}

	return
}

// Close write will close resource that used.
func (h *Hosts) Close() error {
	return h.fd.Close()
}

// Write will write servers into hosts.
func (h *Hosts) Write(c chan *model.Server) (err error) {
	for v := range c {
		err = h.tmpl.Execute(h.fd, v)
		if err != nil {
			log.Printf("Template generate failed for %v", err)
			continue
		}
	}

	return
}
